#
#    while A : B applies A to B until it saturates, thus becoming idempotent
#
#    demo: while {(aps int_add:first 2:B) (tail 2:B)} : 1 2 3 4
#
def while : {some (if ((A:B)=B):B) : while A : A : B}
#
#   ker A is the kernel of A defined by A:X=().
#
#   demo: kernel null : a b c
#   demo: kernel pass : a b c
#   demo: kernel {3=(count:B)} : a b c d
#   demo: kernel {3=(count:B)} : a b c
#   demo: ker {B=2} : 1 2 3 1 2 3
#
def kernel : {if (A:B):B}
def ker : {ap kernel A : B}
#
#  demo: ap foo : 1 2 3
#  demo: ap {bin : B} : 1 2 3
#  demo: ap {first A : get bin : B} 2 : (bin:a b c d e) (bin:x y z)
#  demo: aq bin bin bin bin : 1 2 3 4
#  demo: ap aq a b c : 1 2 3
#  demo: pairs a b c : 1 2 3
#  demo: aq bin a b c : 1 2 3
#  demo: aq first 2 3 : a b c d e f g
#  demo: by 2 foo : a b c d e f g
#  demo: ap {if (count:get bin:B)=2:B} : (bin:a b) (bin:a b c) (bin:x y) (bin:a b c d)
#
def pairs : {ap aq bin A : B}
