#
#   more : evaluate more with specified max seconds
#   with : create a new 'scope' including argument specified definitions
#   do   : pairs with 'with' to evaluate in new context
#   dom  : same as do but using multiprocessing
#
#   demo: more : a b c
#   demo: more :
#   demo: with (let x:5) (let y:6) : int_sum : x? y?
#   demo: do : with (let x:5) (let y:6) : int_sum : x? y?
#   demo: right : do : with (let x:5) (let y:6) : int_sum : x? y?
#   demo: x? y?
#   demo: do 10 : with (def first3 : {first 3:B}) : first3 : a b c d e f g
#   demo: get with : do 10 : with (def first3 : {first 3:B}) : first3 : a b c d e f g
#   demo: first3 : a b c d e f g
#   demo: do : with (let x:a) (let y:b) : (x? y?) = (y? x?)
#   demo: do 100 : with (let x:a) (let y:a) : (x? y?) = (y? x?)
#   demo: with : nat : 0
#   demo: do 0.1 : with : nat : 0
#   demo: do 1 : with : nat : 0
#   demo: do 10 : (with:int_sum : first 10 : nat :0) (with:int_sum:first 20:nat:0)
#
def do : ap do1
def dom : {multi A:B}
