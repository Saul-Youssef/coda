#
#   * +
#
def star : {prod (:A) (:B)} 
def plus : {sum  (:A) (:B)} 
#
#   Simple 
#
def simple : {(B x?:y?) = (B:y?)} 
#
#   Ring 
#
def ring_left:  { (B x? y?:z?) = (B x?:z?) (B y?:z?) }
def ring_right: { (B x? : y? z?) = (B x?:y?) (B x?:z?) } 
#
#   Idempotence 
#
def idempotent  : {(B:B:x?)=(B:x?)} 
def idempotent2 : {(B x?:B:y?)=(B:B x?:y?)} 
def space_b     : {(B x? y?:z?) = (B x?:B y?:z?)} 
#
#   Distributive
#
def distributive  : {(B:x? y?)=((B:x?) (B:y?))} 
def distributive2 : {(B:x? y?)=(B:(B:x?) (B:y?)) } 
def space_a : {(B x?:y? z?) = (B: (B x?:y?) (B x?:z?)) }
#
def nilpotent   : {B:x?}
def commutative : {(B:x? y?)=(B:y? x?)} 
def involution  : {((B:B:x?)=x?)} 
def semilattice : {(B:x? x?)=(B:x?)} 
#
#   Commutes 
#
def commuting : { (A*B:x?)=(B*A:x?) }


