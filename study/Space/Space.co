#
#   Various "functors" making spaces from existing spaces 
#
#   The kernel of a space
#
#   demo: ker is a b : a x y a b z z 
#
def ker : apif {(A:B)=(A:)} 
#  
def Seq : {ap (in A:B)} 
def inner : in 
def series : {B (A:B)} 
def end : {A * B * A} 

#   If U is a space, and n is an atom, then 
#
#   (One n : U) is the space of (n:u) for u in U.
#   (Seq n : U) is the space of sequences of (b:u).
#   (Two n : U) is the space of pairs 
#   (End U : X) is an endomorphism of U for any X
#
#def One : {prod (:put A) (:B) (:get A)} 
#def Seq : ap {prod (:put A) (:B) (:get A)} 
#
#def End :  {prod (:A) (:B) (:A)}
#def Down : {prod (:put A) (:B) (:get A)}
#
#   General commutator with two co-args and co-inputs 
#
#    U*V = V*U, U:V:X = V:U:X for all X
#
def commutator : ap {bool:((get:first:A)*(get:last:A):get:B)=((get:last:A)*(get:first:A):get:B)}
#
#    U:U:X = U:X for all X.  Each space must be idempotent.
#
Def idempotent : ap {bool:(A:get:B)=(A:A:get:B)}
#
#    U:X = U:rev:X for all X.  Algebraic
#
Def algebraic : ap {bool:(A:get:B)=(A:rev:get:B)} 
#
#    U:X X = U:X 
#
Def semilattice : ap {bool:(A:B)=(A:B B)}
#
#    U:U:X = X for all X.
#
Def involution : ap {bool:(get:B)=(A:A:get:B)} 
#
#
Def nilpotent : ap {bool:(A:get:B)} 
Def identity : ap {bool:(get:B)=(A:get:B)} 
#
#   Searching 
#
Def idempotent_search : ap {with (get:B):bool : idempotent (get:B) : A}
Def algebraic_search : ap {with (get:B):bool : algebraic (get:B) : A}
Def involution_search : ap {with (get:B):bool : involution (get:B) : A} 