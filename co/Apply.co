#
#    while A : B applies A to B until it saturates, thus becoming idempotent
#
#    demo: while nat_sum : 1 2 3 4
#    demo: frontstrip | | : | | | | |
#    demo: while frontstrip | | : | | | | |
#
def while : {_loop A : _LOOP : B}
#
#def while : {sat : seq A : B}
#def seq : {(A:B) (seq A : (A:B)) }
#
#
#
#def while : {some (if ((A:B)=B):B) : while A : A : B}


#
#   ker A is the kernel of A defined by A:X=().
#
#   demo: ker null : a b c
#   demo: ker pass : a b c
#   demo: ker {3=(count:B)} : a b c d
#
def ker : {if (A:B):B}
#def ker : {ap kernel A : B}
#
#
#    demo: ab 2 : a b c d e f g
#    demo: ab 1 : a b c d e f g
#    demo: ab 0 : a b c d e f g
#    demo: ab   : a b c d e f g
#
#def ab : {ap (head A:B):(tail A:B)}
#
#    next is typically for sequences
#
#    demo: next {nat_sum:1 (last:B)} : 1 2 3
#    demo: next {nat_sum:last 2:B} : 1 1 2 3
#
#def next : {B (A:B)}
#
#    demo: co 2 : a b c d e f g
#    demo: co 3 : a b c d e f g
#
#def co : {ap {(:(arg:B) (right:B))} : ab A 1 : pre bin :B}

#
#    demo: apby 2 count : a b c d e f g
#    demo: apby 2 last  : a b c d e f g
#
#def apby : {ap {A:get:B} (tail 1:A) : by (head 1:A) : B}
#
#   Apply data n-times
#
#   demo: pow 3 {B x} : 6
#   demo: pow 3 next {nat_sum:last 2:B} : 1 1
#
#def pow : {prod (rep (head 1:A):(:tail 1:A)):B}
