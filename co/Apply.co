#
#    while A : B applies A to B until it saturates, thus becoming idempotent
#
#    demo: while nat_sum : 1 2 3 4
#    demo: frontstrip | | : | | | | |
#    demo: while frontstrip | | : | | | | |
#
def while : {_loop A : _LOOP : B}
#
#   ker A is the kernel of A defined by A:X=().
#
#   demo: ker null : a b c
#   demo: ker pass : a b c
#   demo: ker {3=(count:B)} : a b c d
#
#def ker : {if ((A:B)=(A:)


#
#   apif A:B returns the atoms in b where (A:b) is true.
#
#   demo: apif {has bin:B} : a b (bin:c) d e
#   demo: apif {B=5} : 1 2 3 4 5 6 5 6
#
def apif : ap {if (A:B):B}
#
#   in A:B applies B to each A-atom contents
#
#   demo: (in bin : {B B}) : (bin:x) (bin:y)
#   demo: ap (in bin : {B B}) : (bin:x) (bin:y)
#
def in : {(put A) * B * (get A)}
#
#   demo: apin count : (bin a:1 2 3) (:d e f)
#   demo: apin pass : (bin a:1 2 3) (:d e f)
#
def apin : ap {A:right:B}
#
#    next is typically for sequences
#
#    demo: next {nat_sum:1 (last:B)} : 1 2 3
#    demo: next {nat_sum:last 2:B} : 1 1 2 3
#
def next : {B (A:B)}
#
#   (pow | | | : B):X does B:B:B:X three times, etc.
#
#   demo: (pow | | | : {B x}) : 6
#   demo: (pow | | | | : next {nat_sum : back | | : B}) : 1 1
#
def pow : {prod (dup A : (:B))}
#
#   fun is a partial function specified by argument pairs.
#   map is a similar generalization where (bin f:g) means if f:B is true
#   return g:B.
#
#   demo: fun (bin a b c:x y z) : a b c
#   demo: fun (bin a:11) (bin b:22) (bin c:45) : b
#   demo: ap fun (bin a:11) (bin b:22) (bin c:45) : a b c
#   demo: map (bin {a=(first:B)}:{45}) : a b c
#   demo: map (bin {a=(first:B)}:{45}) : x a b c
#   demo: map (bin {a=(first:B)}:{45}) (bin {not:a=(first:B)}:pass) : a b c
#   demo: map (bin {a=(first:B)}:{45}) (bin {not:a=(first:B)}:pass) : x a b c
#
def fun : aq {if ((arg:A)=B):right:A}
def map : aq {if ((arg:A):B):(right:A):B}
