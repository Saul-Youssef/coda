#
#   has/hasnt selects, get gets, is/isnt tests
#
#   demo: has bin : x y z (bin:a b c) (bin a:b c) (bin:)
#   demo: hasnt bin : x y z (bin:a b c) (bin a:b c) (bin:)
#   demo: has ((:):(:)) : x y z (bin:a b c)
#   demo: is y : x y z y z y
#   demo: is y x (bin:a b) : x y z (bin:a b) (bin:a) y z y
#   demo: is (bin:a b) : x y (bin:a b) z
#   demo: isnt x y : x y z (bin:a b) (bin:a) y z y
#   demo: get bin : x y z (bin:a b c) (bin:x y)
#   demo: get ((:):(:)) : x y z (bin: a b c)
#   demo: get bin: (bin a:b c) (bin:x y)
#
def has   : ap {if  (A=(domain:B)):B}
def hasnt : ap {nif (A=(domain:B)):B}
def is    : ap {nif (ar {not:A=B} A:B):B}
def isnt  : ap { if (ar {not:A=B} A:B):B}
#
#    co A is the dual of A, co A:X -> A for any X.
#
#    demo: const 6 : a b c
#    demo: const 1 2 3 :
#
def const : {A}
#
#   * +
#
def star : {prod (:A) (:B)}
def plus : {sum  (:A) (:B)}
