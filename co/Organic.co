#
#    Organic
#
#let Organic : text_sort : ai aj ap aq ar ker while
#    arg bin const domain get has hasnt if is isnt left
#    nif null pass plus prod put right star sum
#    back backstrip count dup ends front frontstrip grp
#    less more once post pre rev common width starts atoms
#    minwidth maxwidth
#    sameLeft sameRight equiv
#    equal bool not
#
#let Organic : srt :
#    arg bin const depth domain get has hasnt if is isnt
#    left nif null pass prod put right sum
#    ai aj ap aq ar ker pow while
#    atoms back backstrip common count dup ends front frontstrip
#    grp item presum preprod prepoly
#    maxwidth minwidth once post pre rev starts tail width
#    equal bool not
#    sameleft sameright equiv

let Organic : srt :
  ai aj ap apif apin aq ar fun map next pow while
  arg bin const depth domain get has hasnt if is isnt left nif null pass plus prod put right star sum
  collectLeft collectRight
  equal bool not
  ge gt le less lt more srt
  atoms back backstrip by combination common count default dup ends
  first front frontstrip grp head item last maxwidth minwidth once pair permutaiton post pre
  prepoly preprod presum rem rep rev starts swap tail width
