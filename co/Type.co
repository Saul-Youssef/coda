#
#   Common properties of multiple types
#
#  make/Make - type creation from input - a "type" in the coda sense
#  sum/Sum - Abelian sum
#  prod/Prod - Associative multiplication
#  sort/Sort - Sort compatible with a partial order
#  class/Class - Equivalence classes of an equivalence relation
#  inv/Inv - Involution
#
#
#def make  :    {(Make:A) A : B}
#def sum   :     {(Sum:A) A : B}
#def prod  :    {(Prod:A) A : B}
#def term  :    {(Term:A) A : B}
#def sort  :    {(Sort:A) A : B}
#def inv   :     {(Inv:A) A : B}
#def extra :   {(Extra:A) A : B}
#def class :   {(Class:A) A : B}

def dom1: {first:dom:B}
#
#   Categories
#
def make : {  (Make:A) A : B }
def sum  : {   (Sum:dom1:B) (dom1:B) : B}
def prod : {  (Prod:dom1:B) (dom1:B) : B}
def sort : {  (Sort:dom1:B) (dom1:B) : B}
def inv  : {   (Inv:dom1:B) (dom1:B) : B}
def set  : {   (Set:dom1:B) (dom1:B) : B}
def extra: { (Extra:dom1:B) (dom1:B) : B}
def term : {  (Term:dom1:B) (dom1:B) : B}
