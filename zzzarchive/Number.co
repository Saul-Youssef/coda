#
#   Count the number of input atoms.
#
#   Note that counting undefined data like (foo:bar) results
#   in more undefined data.
#
#   demo: count : a b c (pass:1 2 3)
#   demo: count :
#   demo: count : foo : bar
#   demo: cont : foo
#   demo: count : foo : bar
#
def count : {sum n : ap one : B}
#
#   Natural numbers, integers, floats, etc.
#
#   These are implemented with native python int, float, etc.
#
def make: {(Make:A)    : B}
def sum:  {(Sum:A)     : B}
def prod: {(Prod:A)    : B}
def term: {ap (Term:A) : B}
def inv:  {ap (Inv:A)  : B}
#
#   Natural numbers
#
#   demo: make n : 1 2 3 4
#   demo: sum n : make n : 1 2 3 4
#   demo: prod n : make n : 1 2 3 4
#
def n :
def (Make:n) : {(ap put n : ap nat1 : B) (select n : B)}
def (Sum :n) : {ap put n : app int_add : get n : make n : B}
def (Prod:n) : {ap put n : app int_mult : get n : make n : B}
def (Term:n) : {get n : make n : B}
#
#   Native integers
#
#   demo: make int : 1 -2 3 -4
#   demo: sum int : 1 -2 3 -4
#   demo: prod int : 1 -2 3 -4
#   demo: inv int : 1 -2 3 -4
#
def int :
def (Make:int) : {(ap put int : ap int1 : B) (select int : B)}
def (Sum :int) : {put int : app int_add : get int : make int : B}
def (Prod:int) : {put int : app int_mult: get int : make int : B}
def (Term:int) : {get int: B}
def (Inv:int)  : {ap put int : int_inv : get int : make int : B}
#
#   Native floating point numbers
#
#   demo: make float : 1.1 -2.2 3.3 -99.9
#   demo: sum float : make float : 1.1 -2.2 3.3 -99.9
#   demo: prod float : make float : 1.1 -2.2 3.3 -99.9
#
def float:
def (Make:float) : {(ap put float : ap float1 : B) (select float:B)}
def (Sum:float)  : {put float : app float_add : get float : make float : B}
def (Prod:float) : {put float : app float_mult : get float : make float : B}
def (Term:float) : {get float:B}
def (Inv:inv): {ap put int : float_inv : get float : make float: B}
