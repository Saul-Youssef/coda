#
#    Ring is ap ap2.
#
#    demo: ring bin 1 2 3 : a b c
#
#def ring : ap ap2
#
#    while A : B applies A to B until it saturates
#
#    demo: while {(aps int_add:first 2:B) (tail 2:B)} : 1 2 3 4
#
def while : {some (if ((A:B)=B):B) : while A : A : B}

def apair_ : {(A : first 2 : B) (tail 2 : B)}
def apair : {while apair_ A : B}
#
#   ker A is the kernel of A defined by A:X=().
#
#   demo: kernel null : a b c
#   demo: kernel pass : a b c
#   demo: kernel {3=(count:B)} : a b c d
#   demo: kernel {3=(count:B)} : a b c
#   demo: ker {B=2} : 1 2 3 1 2 3
#
def kernel : {if (A:B):B}
def ker : {ap kernel A : B}
#
#   Apply A to each input in passing.
#
#   demo: apx count : 1 2 3
#
def apx : ap {B (A:B)}
#
#   Morphism space operation
#
#   demo: (mor pass : pass) : a b c
#   demo: (mor pass : rev) : a b c
#   demo: (mor rev : count) : a b c 
#
def mor : {apcon (:A) (:B)}
