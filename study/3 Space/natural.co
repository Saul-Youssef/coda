#
#    Natural numbers 
#
#    n.make  
#    n.type  Distributive space of naturals 
#    n.ring  Full space of natural numbers 
#    n.term  Terminal output 
#
def n:
def n.make : ap put n * nats  
def n.type : has n 
def n.term : get n
def n.sum  : put n * int_sum * get n   
def n.prod : put n * int_prod * get n   
def n.ring : {n.prod : (n.prod:A) (n.sum:B)} 
#
#    Alternative natural numbers a la Connes 
#
def m:
def m.make : ap put m * nats 
def m.type : has m 
def m.term : get m
def m.sum  : put m * int_max * get m
def m.prod : put m * int_sum * get m
def m.ring : {m.prod : (m.prod:A) (m.sum:B)} 
#
#    Endomorphisms of spaces 
#
#    Given a space U.
#
#    end.make U : X 
#        Makes the endomorphism U*X*U.
#    end.sum U : (:F) (:G) (:H) 
#        Makes the endomorphism U * (F+G+H)
#    end.prod U : (:F) (:G) (:H) 
#        Makes the endomorphism F*G*H 
#
def end.make : {:product (:A) (:B) (:A)}
def end.sum  : {:product (:A) (:sum B)} 
def end.prod : {:product:B}
def end.ring : {end.prod : (end.prod:A) (end.sum:B)} 
def end.app  : {(get:A):B} 


