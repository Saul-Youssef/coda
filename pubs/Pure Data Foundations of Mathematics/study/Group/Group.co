#
#    A group is a type with associative product, identity,
#    and inverses.  That's the normal math way of defining a group.
#
#    A group G is a type with an associative multiplication (prod G), with
#    an identity (id:G) and with inverses (inv G) satisfying the
#    following
#
#    1. Type : G
#    2. Associative : prod G
#    3. Identity prod G : (id:G)
#    4. Inverse prod G : (inv:G)
#
def Group : { (Type : B)
              (Associative : prod B)
              (Identity prod B : (id:B))
              (Inverse prod B : (inv:B))
            }
#
#    Fact: the identity is unique in group
#
#    If these are facts for x? in group G?...
#
#      1. (prod : x? g? = g?)
#      2. (prod : g? x? = g?)
#
#    then, x? = (id:G?)
#
