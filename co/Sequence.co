#
#   Select the n'th items from input.
#
#   demo: nth 3 : a b c d
#   demo: nth 3 1 : a b c d
#   demo: nth 3 0 1 : a b c d
#   demo: nth : a b c
#
def nth : {aq nth1 A : B}
#
#   pre and post-fixing data
#
#   demo: pre a b : 1 2
#   demo: post a b : 1 2
#   demo: ap pre <\n> : first 10 : nat : 0
#
def pre  : {A B}
def post : {B A}
#
#   Basic sequence operations
#
#   demo: head 2 : a b c d e f g
#   demo: tail 2 : a b c d e f g
#   demo: first 2 : a b c d e f g
#   demo: last 2 : a b c d e f g
#   demo: head : a b c d e f g
#   demo: tail :  a b c d e f g
#   demo: first : a b c d e f g
#   demo: last : a b c d e f g
#   demo: head 2 1 : a b c d e f g
#   demo: tail 2 1 : a b c d e f g
#   demo: skip : a b c
#   demo: skip 2 : a b c d e
#   demo: by 2 : a b c d e
#   demo: by : a b c d e
#   demo: by 2 : nat : 0
#
def first : {head (if A:1) A : B}
#def first : {head (some A:1) : B}
#
#   front/back organically removes an argument specified number of
#   items from the front/back of the input.
#
#   front a A : b B -> b (front A:B)
#   front A : B -> () if A or B are empty
#
#   back a A : B b -> (back A:B) b
#   back A : B -> () if A or B are empty
#
#   demo: front | | : a b c d e f g
#   demo: back  | | : a b c d e f g
#   demo: item  | | : a b c d e f g
#
def item : {front | : rev : front A : B}
#
#   Replace all atoms with (:)
#
#   demo: atoms : a b c
#   demo: atoms :
#
def atoms : ap const (:)
#
#   Repetition
#
#   demo: rep 3 : x
#   demo: rep 3 2 : x
#   demo: rep 1 : x
#   demo: rep 0 : x
#   demo: rep : x
#
#def rep : {ai rep_ A : B}
