#
#   Various "functors" making spaces from existing spaces 
#
#   The Demo notebook has demonstrations 
#  
#   If U is a space, and n is an atom, then 
#
#   (One n : U) is the space of (n:u) for u in U.
#   (Seq n : U) is the space of sequences of (b:u).
#   (Two n : U) is the space of pairs 
#   (End U : X) is an endomorphism of U for any X
#
def One : {prod (:put A) (:B) (:get A)} 
def Seq : {ap  prod (:put A) (:B) (:get A)} 
#
def End :  {prod (:A) (:B) (:A)}
def Down : {prod (:put A) (:B) (:get A)}
#
#  
#
def _Slice : {prod (:put) (:B) (:get) (:nth A)} 
def _Pair : {sum (:_Slice 1:get:nth 1:B) (:_Slice 2:get:nth 2:B)}
def Product : { Down A : (_Pair:B) }
#
#
def Two : {Product A : (:B) (:B)}