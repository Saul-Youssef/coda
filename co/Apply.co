#
#    while A : B applies A to B until it saturates, thus becoming idempotent
#
#    demo: while {(aps int_add:first 2:B) (tail 2:B)} : 1 2 3 4
#
def while : {some (if ((A:B)=B):B) : while A : A : B}
#
#   ker A is the kernel of A defined by A:X=().
#
#   demo: kernel null : a b c
#   demo: kernel pass : a b c
#   demo: kernel {3=(count:B)} : a b c d
#   demo: kernel {3=(count:B)} : a b c
#   demo: ker {B=2} : 1 2 3 1 2 3
#
def kernel : {if (A:B):B}
def ker : {ap kernel A : B}
#
#   product and sum for the algebra of morphisms
#
#   demo: product (:first 3) (:rev) : a b c d e f g
#   demo: product (:rev) (:first 3) : a b c d e f g
#   demo: sum (:first 3) (:rev) : a b c d e f g
#   demo: sum (:rev) (:first 3) : a b c d e f g
#   demo: sum (:rev) (:{first 3:B}) : a b c d e f g
#   demo: sum (bin:rev) (bin:{first 3:B}) : a b c d e f g
#
#def sum : {aq {(right:A):B} A : B}
