#
#    Natural number types and string
#

def Natural : {
   ( def B: )
   ( let (Extra:B) : A )
   ( let (Make:B) : { (ap put A: ap nat1 : B) (has A:B) (apall (Extra:A):B) } )
   ( let (Sum:B)  : {ap put A : app int_add : pre 0 : get A : make A : B} )
   ( let (Prod:B) : {ap put A : app int_mult : pre 1 : get A : make A : B} )
   ( let (Sort:B) : {ap put A : int_sort : get A : make A : B} )
   ( let (Term:B) : {get A : make A : B} )
   }

def Integer : {
   ( def B: )
   ( let (Extra:B) : A )
   ( let (Make:B) : { (ap put A: ap int1 : B) (has A:B) (apall (Extra:A):B) } )
   ( let (Sum:B)  : {ap put A : app int_add : pre 0 : get A : make A : B} )
   ( let (Prod:B) : {ap put A : app int_mult : pre 1 : get A : make A : B} )
   ( let (Sort:B) : {ap put A : int_sort : get A : make A : B} )
   ( let (Term:B) : {get A : make A : B} )
   }

def Float : {
   ( def B: )
   ( let (Extra:B) : A )
   ( let (Make:B) : { (ap put A: ap float1 : B) (has A:B) (apall (Extra:A):B) } )
   ( let (Sum:B)  : {ap put A : app float_add : pre 0 : get A : make A : B} )
   ( let (Prod:B) : {ap put A : app float_mult : pre 1 : get A : make A : B} )
   ( let (Sort:B) : {ap put A : float_sort : get A : make A : B} )
   ( let (Term:B) : {get A : make A : B} )
   }

def str : {ap join : B}

def String : {
   ( def B: )
   ( let (Extra:B) : A )
   ( let (Make:B) : {(ap put A : str : B) (has A:B) (apall (Extra:A):B)} )
   ( let (Sum:B)  : {ap put A : join : get A : make A : B} )
   ( let (Term:B) : {get A : make A : B} )
   }

#
#   A few basic types for convenience and demos
#
Natural : n
Integer : int
Float   : float
String  : string
